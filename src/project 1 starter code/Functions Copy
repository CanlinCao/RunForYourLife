import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Random;
import java.util.Scanner;
import processing.core.PImage;
import processing.core.PApplet;

/*
Functions - everything our virtual world is doing right now - is this a good design?
 */

final class Functions
{
   public static final Random rand = new Random();

   public static final String OCTO_KEY = "octo";
   public static final int OCTO_NUM_PROPERTIES = 7;
   public static final int OCTO_ID = 1;
   public static final int OCTO_COL = 2;
   public static final int OCTO_ROW = 3;
   public static final int OCTO_LIMIT = 4;
   public static final int OCTO_ACTION_PERIOD = 5;
   public static final int OCTO_ANIMATION_PERIOD = 6;

   public static final String OBSTACLE_KEY = "obstacle";
   public static final int OBSTACLE_NUM_PROPERTIES = 4;
   public static final int OBSTACLE_ID = 1;
   public static final int OBSTACLE_COL = 2;
   public static final int OBSTACLE_ROW = 3;

   public static final String FISH_KEY = "fish";
   public static final int FISH_NUM_PROPERTIES = 5;
   public static final int FISH_ID = 1;
   public static final int FISH_COL = 2;
   public static final int FISH_ROW = 3;
   public static final int FISH_ACTION_PERIOD = 4;

   public static final String ATLANTIS_KEY = "atlantis";
   public static final int ATLANTIS_NUM_PROPERTIES = 4;
   public static final int ATLANTIS_ID = 1;
   public static final int ATLANTIS_COL = 2;
   public static final int ATLANTIS_ROW = 3;
   public static final int ATLANTIS_ANIMATION_PERIOD = 70;
   public static final int ATLANTIS_ANIMATION_REPEAT_COUNT = 7;

   public static final String SGRASS_KEY = "seaGrass";
   public static final int SGRASS_NUM_PROPERTIES = 5;
   public static final int SGRASS_ID = 1;
   public static final int SGRASS_COL = 2;
   public static final int SGRASS_ROW = 3;
   public static final int SGRASS_ACTION_PERIOD = 4;

   public static final String CRAB_KEY = "crab";
   public static final String CRAB_ID_SUFFIX = " -- crab";
   public static final int CRAB_PERIOD_SCALE = 4;
   public static final int CRAB_ANIMATION_MIN = 50;
   public static final int CRAB_ANIMATION_MAX = 150;

   public static final String QUAKE_KEY = "quake";
   public static final String QUAKE_ID = "quake";
   public static final int QUAKE_ACTION_PERIOD = 1100;
   public static final int QUAKE_ANIMATION_PERIOD = 100;
   public static final int QUAKE_ANIMATION_REPEAT_COUNT = 10;


   public static final String FISH_ID_PREFIX = "fish -- ";
   public static final int FISH_CORRUPT_MIN = 20000;
   public static final int FISH_CORRUPT_MAX = 30000;
   public static final int FISH_REACH = 1;

   public static final String BGND_KEY = "background";
   public static final int BGND_NUM_PROPERTIES = 4;
   public static final int BGND_ID = 1;
   public static final int BGND_COL = 2;
   public static final int BGND_ROW = 3;

   public static final int COLOR_MASK = 0xffffff;
   public static final int KEYED_IMAGE_MIN = 5;
   private static final int KEYED_RED_IDX = 2;
   private static final int KEYED_GREEN_IDX = 3;
   private static final int KEYED_BLUE_IDX = 4;

   public static final int PROPERTY_KEY = 0;

   public static PImage getCurrentImage(Object entity)
   {
      if (entity instanceof Background)
      {
         return ((Background)entity).images
            .get(((Background)entity).imageIndex);
      }
      else if (entity instanceof Entity)
      {
         return ((Entity)entity).images.get(((Entity)entity).imageIndex);
      }
      else
      {
         throw new UnsupportedOperationException(
            String.format("getCurrentImage not supported for %s",
            entity));
      }
   }

   public static void executeAction(Action action, EventScheduler scheduler)
   {
      switch (action.kind)
      {
      case ACTIVITY:
         executeActivityAction(action, scheduler);
         break;

      case ANIMATION:
         executeAnimationAction(action, scheduler);
         break;
      }
   }

   public static void executeAnimationAction(Action action,
      EventScheduler scheduler)
   {
      action.entity.nextImage();

      if (action.repeatCount != 1)
      {
         scheduleEvent(scheduler, action.entity,
            createAnimationAction(action.entity,
               Math.max(action.repeatCount - 1, 0)),
                 action.entity.getAnimationPeriod());
      }
   }

   public static void executeActivityAction(Action action,
      EventScheduler scheduler)
   {
      switch (action.entity.kind)
      {
      case OCTO_FULL:
         executeOctoFullActivity(action.entity, action.world,
            action.imageStore, scheduler);
         break;

      case OCTO_NOT_FULL:
         executeOctoNotFullActivity(action.entity, action.world,
            action.imageStore, scheduler);
         break;

      case FISH:
         executeFishActivity(action.entity, action.world, action.imageStore,
            scheduler);
         break;

      case CRAB:
         executeCrabActivity(action.entity, action.world,
            action.imageStore, scheduler);
         break;

      case QUAKE:
         executeQuakeActivity(action.entity, action.world, action.imageStore,
            scheduler);
         break;

      case SGRASS:
         (action.world).executeSgrassActivity(action.entity, action.imageStore,
            scheduler);
         break;

      case ATLANTIS:
         executeAtlantisActivity(action.entity, action.world, action.imageStore,
            scheduler);
         break;

      default:
         throw new UnsupportedOperationException(
            String.format("executeActivityAction not supported for %s",
            action.entity.kind));
      }
   }

   public static void executeOctoFullActivity(Entity entity, WorldModel world,
      ImageStore imageStore, EventScheduler scheduler)
   {
      Optional<Entity> fullTarget = world.findNearest(entity.position,
         EntityKind.ATLANTIS);

      if (fullTarget.isPresent() &&
         moveToFull(entity, world, fullTarget.get(), scheduler))
      {
         //at atlantis trigger animation
         scheduleActions(fullTarget.get(), scheduler, world, imageStore);

         //transform to unfull
         world.transformFull(entity, scheduler, imageStore);
      }
      else
      {
         scheduleEvent(scheduler, entity,
            createActivityAction(entity, world, imageStore),
            entity.actionPeriod);
      }
   }

   public static void executeOctoNotFullActivity(Entity entity,
      WorldModel world, ImageStore imageStore, EventScheduler scheduler)
   {
      Optional<Entity> notFullTarget = world.findNearest(entity.position,
         EntityKind.FISH);

      if (!notFullTarget.isPresent() ||
         !moveToNotFull(entity, world, notFullTarget.get(), scheduler) ||
         !transformNotFull(entity, world, scheduler, imageStore))
      {
         scheduleEvent(scheduler, entity,
            createActivityAction(entity, world, imageStore),
            entity.actionPeriod);
      }
   }

   public static void executeFishActivity(Entity entity, WorldModel world,
      ImageStore imageStore, EventScheduler scheduler)
   {
      Point pos = entity.position;  // store current position before removing

      world.removeEntity(entity);
      unscheduleAllEvents(scheduler, entity);

      Entity crab = createCrab(entity.id + CRAB_ID_SUFFIX,
              pos, entity.actionPeriod / CRAB_PERIOD_SCALE,
              CRAB_ANIMATION_MIN +
                      Functions.rand.nextInt(CRAB_ANIMATION_MAX - CRAB_ANIMATION_MIN),
              imageStore.getImageList(CRAB_KEY));

      world.addEntity(crab);
      scheduleActions(crab, scheduler, world, imageStore);
   }

   public static void executeCrabActivity(Entity entity, WorldModel world,
      ImageStore imageStore, EventScheduler scheduler)
   {
      Optional<Entity> crabTarget = world.findNearest(
         entity.position, EntityKind.SGRASS);
      long nextPeriod = entity.actionPeriod;

      if (crabTarget.isPresent())
      {
         Point tgtPos = crabTarget.get().position;

         if (moveToCrab(entity, world, crabTarget.get(), scheduler))
         {
            Entity quake = createQuake(tgtPos,
               imageStore.getImageList(QUAKE_KEY));

            world.addEntity(quake);
            nextPeriod += entity.actionPeriod;
            scheduleActions(quake, scheduler, world, imageStore);
         }
      }

      scheduleEvent(scheduler, entity,
         createActivityAction(entity, world, imageStore),
         nextPeriod);
   }

   public static void executeQuakeActivity(Entity entity, WorldModel world,
      ImageStore imageStore, EventScheduler scheduler)
   {
      unscheduleAllEvents(scheduler, entity);
      world.removeEntity(entity);
   }

   public static void executeAtlantisActivity(Entity entity, WorldModel world,
                                           ImageStore imageStore, EventScheduler scheduler)
   {
      unscheduleAllEvents(scheduler, entity);
      world.removeEntity(entity);
   }

//   public static void executeSgrassActivity(Entity entity, WorldModel world,
//      ImageStore imageStore, EventScheduler scheduler)
//   {
//      Optional<Point> openPt = findOpenAround(world, entity.position);
//
//      if (openPt.isPresent())
//      {
//         Entity fish = world.createFish(FISH_ID_PREFIX + entity.id,
//                 openPt.get(), FISH_CORRUPT_MIN +
//                         Functions.rand.nextInt(FISH_CORRUPT_MAX - FISH_CORRUPT_MIN),
//                 imageStore.getImageList(FISH_KEY));
//         world.addEntity(fish);
//         scheduleActions(fish, scheduler, world, imageStore);
//      }
//
//      scheduleEvent(scheduler, entity,
//         createActivityAction(entity, world, imageStore),
//         entity.actionPeriod);
//   }

   public static void scheduleActions(Entity entity, EventScheduler scheduler,
      WorldModel world, ImageStore imageStore)
   {
      switch (entity.kind)
      {
      case OCTO_FULL:
         scheduleEvent(scheduler, entity,
            createActivityAction(entity, world, imageStore),
            entity.actionPeriod);
         scheduleEvent(scheduler, entity, createAnimationAction(entity, 0),
                 entity.getAnimationPeriod());
         break;

      case OCTO_NOT_FULL:
         scheduleEvent(scheduler, entity,
            createActivityAction(entity, world, imageStore),
            entity.actionPeriod);
         scheduleEvent(scheduler, entity,
            createAnimationAction(entity, 0), entity.getAnimationPeriod());
         break;

      case FISH:
         scheduleEvent(scheduler, entity,
            createActivityAction(entity, world, imageStore),
            entity.actionPeriod);
         break;

      case CRAB:
         scheduleEvent(scheduler, entity,
            createActivityAction(entity, world, imageStore),
            entity.actionPeriod);
         scheduleEvent(scheduler, entity,
            createAnimationAction(entity, 0), entity.getAnimationPeriod());
         break;

      case QUAKE:
         scheduleEvent(scheduler, entity,
            createActivityAction(entity, world, imageStore),
            entity.actionPeriod);
         scheduleEvent(scheduler, entity,
            createAnimationAction(entity, QUAKE_ANIMATION_REPEAT_COUNT),
                 entity.getAnimationPeriod());
         break;

      case SGRASS:
         scheduleEvent(scheduler, entity,
            createActivityAction(entity, world, imageStore),
            entity.actionPeriod);
         break;
      case ATLANTIS:
         scheduleEvent(scheduler, entity,
                    createAnimationAction(entity, ATLANTIS_ANIMATION_REPEAT_COUNT),
                 entity.getAnimationPeriod());
            break;

      default:
      }
   }

   public static boolean transformNotFull(Entity entity, WorldModel world,
      EventScheduler scheduler, ImageStore imageStore)
   {
      if (entity.resourceCount >= entity.resourceLimit)
      {
         Entity octo = createOctoFull(entity.id, entity.resourceLimit,
            entity.position, entity.actionPeriod, entity.animationPeriod,
            entity.images);

         world.removeEntity(entity);
         unscheduleAllEvents(scheduler, entity);

         world.addEntity(octo);
         scheduleActions(octo, scheduler, world, imageStore);

         return true;
      }

      return false;
   }

//   public static void transformFull(Entity entity, WorldModel world,
//      EventScheduler scheduler, ImageStore imageStore)
//   {
//      Entity octo = world.createOctoNotFull(entity.id, entity.resourceLimit,
//         entity.position, entity.actionPeriod, entity.animationPeriod,
//         entity.images);
//
//      world.removeEntity(entity);
//      unscheduleAllEvents(scheduler, entity);
//
//      world.addEntity(octo);
//      scheduleActions(octo, scheduler, world, imageStore);
//   }

   public static boolean moveToNotFull(Entity octo, WorldModel world,
      Entity target, EventScheduler scheduler)
   {
      if (octo.position.adjacent(target.position))
      {
         octo.resourceCount += 1;
         world.removeEntity(target);
         unscheduleAllEvents(scheduler, target);

         return true;
      }
      else
      {
         Point nextPos = nextPositionOcto(octo, world, target.position);

         if (!octo.position.equals(nextPos))
         {
            Optional<Entity> occupant = world.getOccupant(nextPos);
            if (occupant.isPresent())
            {
               unscheduleAllEvents(scheduler, occupant.get());
            }

            world.moveEntity(octo, nextPos);
         }
         return false;
      }
   }

   public static boolean moveToFull(Entity octo, WorldModel world,
      Entity target, EventScheduler scheduler)
   {
      if (octo.position.adjacent(target.position))
      {
         return true;
      }
      else
      {
         Point nextPos = nextPositionOcto(octo, world, target.position);

         if (!octo.position.equals(nextPos))
         {
            Optional<Entity> occupant = world.getOccupant(nextPos);
            if (occupant.isPresent())
            {
               unscheduleAllEvents(scheduler, occupant.get());
            }

            world.moveEntity(octo, nextPos);
         }
         return false;
      }
   }

   public static boolean moveToCrab(Entity crab, WorldModel world,
      Entity target, EventScheduler scheduler)
   {
      if (crab.position.adjacent(target.position))
      {
         world.removeEntity(target);
         unscheduleAllEvents(scheduler, target);
         return true;
      }
      else
      {
         Point nextPos = nextPositionCrab(crab, world, target.position);

         if (!crab.position.equals(nextPos))
         {
            Optional<Entity> occupant = world.getOccupant(nextPos);
            if (occupant.isPresent())
            {
               unscheduleAllEvents(scheduler, occupant.get());
            }

            world.moveEntity(crab, nextPos);
         }
         return false;
      }
   }

   public static Point nextPositionOcto(Entity entity, WorldModel world,
      Point destPos)
   {
      int horiz = Integer.signum(destPos.x - entity.position.x);
      Point newPos = new Point(entity.position.x + horiz,
         entity.position.y);

      if (horiz == 0 || world.isOccupied(newPos))
      {
         int vert = Integer.signum(destPos.y - entity.position.y);
         newPos = new Point(entity.position.x,
            entity.position.y + vert);

         if (vert == 0 || world.isOccupied(newPos))
         {
            newPos = entity.position;
         }
      }

      return newPos;
   }

   public static Point nextPositionCrab(Entity entity, WorldModel world,
      Point destPos)
   {
      int horiz = Integer.signum(destPos.x - entity.position.x);
      Point newPos = new Point(entity.position.x + horiz,
         entity.position.y);

      Optional<Entity> occupant = world.getOccupant(newPos);

      if (horiz == 0 ||
         (occupant.isPresent() && !(occupant.get().kind == EntityKind.FISH)))
      {
         int vert = Integer.signum(destPos.y - entity.position.y);
         newPos = new Point(entity.position.x, entity.position.y + vert);
         occupant = world.getOccupant(newPos);

         if (vert == 0 ||
            (occupant.isPresent() && !(occupant.get().kind == EntityKind.FISH)))
         {
            newPos = entity.position;
         }
      }

      return newPos;
   }

//   public static boolean adjacent(Point p1, Point p2)
//   {
//      return (p1.x == p2.x && Math.abs(p1.y - p2.y) == 1) ||
//         (p1.y == p2.y && Math.abs(p1.x - p2.x) == 1);
//   }

   public static void scheduleEvent(EventScheduler scheduler,
      Entity entity, Action action, long afterPeriod)
   {
      long time = System.currentTimeMillis() +
         (long)(afterPeriod * scheduler.timeScale);
      Event event = new Event(action, time, entity);

      scheduler.eventQueue.add(event);

      // update list of pending events for the given entity
      List<Event> pending = scheduler.pendingEvents.getOrDefault(entity,
         new LinkedList<>());
      pending.add(event);
      scheduler.pendingEvents.put(entity, pending);
   }

   public static void unscheduleAllEvents(EventScheduler scheduler,
      Entity entity)
   {
      List<Event> pending = scheduler.pendingEvents.remove(entity);

      if (pending != null)
      {
         for (Event event : pending)
         {
            scheduler.eventQueue.remove(event);
         }
      }
   }

   public static void removePendingEvent(EventScheduler scheduler,
      Event event)
   {
      List<Event> pending = scheduler.pendingEvents.get(event.entity);

      if (pending != null)
      {
         pending.remove(event);
      }
   }

   public static void updateOnTime(EventScheduler scheduler, long time)
   {
      while (!scheduler.eventQueue.isEmpty() &&
         scheduler.eventQueue.peek().time < time)
      {
         Event next = scheduler.eventQueue.poll();

         removePendingEvent(scheduler, next);

         executeAction(next.action, scheduler);
      }
   }

//   public static void loadImages(Scanner in, ImageStore imageStore,
//      PApplet screen)
//   {
//      int lineNumber = 0;
//      while (in.hasNextLine())
//      {
//         try
//         {
//            processImageLine(imageStore.images, in.nextLine(), screen);
//         }
//         catch (NumberFormatException e)
//         {
//            System.out.println(String.format("Image format error on line %d",
//               lineNumber));
//         }
//         lineNumber++;
//      }
//   }

//   public static void processImageLine(Map<String, List<PImage>> images,
//      String line, PApplet screen)
//   {
//      String[] attrs = line.split("\\s");
//      if (attrs.length >= 2)
//      {
//         String key = attrs[0];
//         PImage img = screen.loadImage(attrs[1]);
//         if (img != null && img.width != -1)
//         {
//            List<PImage> imgs = getImages(images, key);
//            imgs.add(img);
//
//            if (attrs.length >= KEYED_IMAGE_MIN)
//            {
//               int r = Integer.parseInt(attrs[KEYED_RED_IDX]);
//               int g = Integer.parseInt(attrs[KEYED_GREEN_IDX]);
//               int b = Integer.parseInt(attrs[KEYED_BLUE_IDX]);
//               setAlpha(img, screen.color(r, g, b), 0);
//            }
//         }
//      }
//   }

//   public static List<PImage> getImages(Map<String, List<PImage>> images,
//      String key)
//   {
//      List<PImage> imgs = images.get(key);
//      if (imgs == null)
//      {
//         imgs = new LinkedList<>();
//         images.put(key, imgs);
//      }
//      return imgs;
//   }

//   /*
//     Called with color for which alpha should be set and alpha value.
//     setAlpha(img, color(255, 255, 255), 0));
//   */
//   public static void setAlpha(PImage img, int maskColor, int alpha)
//   {
//      int alphaValue = alpha << 24;
//      int nonAlpha = maskColor & COLOR_MASK;
//      img.format = PApplet.ARGB;
//      img.loadPixels();
//      for (int i = 0; i < img.pixels.length; i++)
//      {
//         if ((img.pixels[i] & COLOR_MASK) == nonAlpha)
//         {
//            img.pixels[i] = alphaValue | nonAlpha;
//         }
//      }
//      img.updatePixels();
//   }

   public static Action createAnimationAction(Entity entity, int repeatCount)
   {
      return new Action(ActionKind.ANIMATION, entity, null, null, repeatCount);
   }

   public static Action createActivityAction(Entity entity, WorldModel world,
      ImageStore imageStore)
   {
      return new Action(ActionKind.ACTIVITY, entity, world, imageStore, 0);
   }

   public static Entity createOctoFull(String id, int resourceLimit,
      Point position, int actionPeriod, int animationPeriod,
      List<PImage> images)
   {
      return new Entity(EntityKind.OCTO_FULL, id, position, images,
         resourceLimit, resourceLimit, actionPeriod, animationPeriod);
   }

   public static Entity createCrab(String id, Point position,
      int actionPeriod, int animationPeriod, List<PImage> images)
   {
      return new Entity(EntityKind.CRAB, id, position, images,
            0, 0, actionPeriod, animationPeriod);
   }

   public static Entity createQuake(Point position, List<PImage> images)
   {
      return new Entity(EntityKind.QUAKE, QUAKE_ID, position, images,
         0, 0, QUAKE_ACTION_PERIOD, QUAKE_ANIMATION_PERIOD);
   }
}
